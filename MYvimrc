" GENERAL OPTIONS
behave xterm
set viminfo='20,\"500,%    " ' Maximum number of previously edited files for which the marks
            "   are remembered.  
            " " Maximum number of lines saved for each register.
            " % When included, save and restore the buffer list.  If Vim is
            "   started with a file name argument, the buffer list is not
            "   restored.  If Vim is started without a file name argument, the
            "   buffer list is restored from the viminfo file.  Buffers
            "   without a file name and buffers for help files are not written
            "   to the viminfo file.
set history=500        " keep {number} lines of command line history
set nowrap              " whether to wrap lines
set tabstop=3        " ts, number of spaces that a tab is equivalent to
set shiftwidth=3    " sw, number of spaces shifted left and righ when issuing << and >>
            "  commands
" set number        " number lines
set nocompatible
set incsearch
set showmatch
set backspace=2
syntax on
set cinoptions=:0,p0,t0
set cinwords=if,unless,else,while,until,do,for,switch,case
set formatoptions=tcqr
set cindent

" VIM DISPLAY OPTIONS
" set showmode        " show which mode (insert, replace, visual)
" set ruler
 set title
" set showcmd        " show commands in status line when typing
" set wildmenu    


" stuff I included

set number    " line numbers enabled
set expandtab " turns tabs chars into an equal amount of space chars,
              " use :retab to set all tabs to spaces
" set mouse=r

"Highlights characters that are longer that 80 columns
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

"Highlights white ispace
"highlight WhitespaceEOL ctermbg=Blue guibg=Blue
"match WhitespaceEOL /\s\+$/

" Splits windows by default to right for sp and below for vsp
set splitright splitbelow

" What does this do again?
nnoremap <silent> <C-k> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
   :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" Resizing vim while in sp/vsp mode resizes correctly
au VimResized * exe "normal! \<c-w>="

"when you tab complete while in : it works like the tab complete in the shell
set wildmenu wildmode=list:longest wildignore=*.o,*.obj,*.so,*.a,*.py[co],*~

" highlight the current line/column
set cursorline "cursorcolumn
" f12 to toggle line/column highlighting
noremap <silent><f12> :set cursorline! cursorcolumn!<cr>
"noremap <silent><f12> :set cursorcolumn!<cr>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" end/begining of line shortcut
noremap L $
noremap H ^

" Remove F1
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" persistent undo
if exists("+undofile")
   set udf
   set undodir=~/.vimundo
endif

" Easy Navigation in split mode
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <C-s> <C-y>

"autocomplete Parenthesis
"When you type an open brace, this will automatically
"insert a closing brace on the same line, after the cursor.
"If you quickly hit Enter after the open brace, (to begin
"a code block), the closing brace will be inserted on the
"line below the cursor. If you quickly press the open brace
"key again after the open brace, Vim won't insert anything extra,
" you'll just get a single open brace. Finally, if you quickly
"type an open and close brace, Vim will not do anything special.

inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}

"Searchs highlight all
set hlsearch

" Toggle Search Highlights
 noremap <space> :set hlsearch! hlsearch?<CR>

"Changes titled on exit
let &titleold="Gotta Knock A Little Harder"

set background=dark
   highlight Comment guibg=Black    guifg=Red    gui=italic
   highlight LineNr  term=NONE
   highlight NonText guifg=Gray95   guibg=Black  gui=bold
   highlight Normal  guibg=Black    guifg=Gray95
   highlight Search  guibg=Cyan     guifg=Black  gui=underline
   highlight Visual  guibg=Green   guifg=Yellow  gui=underline

"Correct alt mapping for LXTerminal
"http://stackoverflow.com/questions/6778961/alt-key-shortcuts-not-working-on-gnome-terminal-with-vim/10216459#10216459
let c='a'
while c <= 'z'
   exec "set <A-".c.">=\e".c
   exec "imap \e".c." <A-".c.">"
   let c = nr2char(1+char2nr(c))
endw

set timeout ttimeoutlen=50

"Drag current lines vertically
"Works with multiple lines in visual mode
noremap <A-j> :m+<CR>
noremap <A-k> :m-2<CR>
inoremap <A-j> <Esc>:m+<CR>
inoremap <A-k> <Esc>:m-2<CR>
vnoremap <A-j> :m'>+<CR>gv
vnoremap <A-k> :m-2<CR>gv


" *******************************************************************
"                    / | / /___  / /____  _____
"                   /  |/ / __ \/ __/ _ \/ ___/
"                  / /|  / /_/ / /_/  __(__  )
"                 /_/ |_/\____/\__/\___/____/)
" ***************** Because I forget stuff ***************************
"
" replace all instances of cat with dog in the entire file.
" %s/cat/dog/g
" replace between lines 12 and 20
" 12,20s/cat/dog/
"
" ctrl + G get name of file and total number of lines
